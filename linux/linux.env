#######################
#### Start of File ####
#######################
# --------------------------------------------------------------- 
# Makefile Contents: Common settings for Linux makefiles
# C/C++ Compiler Used: gcc version 3.4.4
# --------------------------------------------------------------- 
# Define file extensions and path variables
OBJ_EXT = .o
EXE_EXT = 
LIB_EXT = .a
DLIB_EXT = .so
PATHSEP = /

# Setup include paths
ADD_INC_PATHS = -I$(GCODE_LIB_DIR)$(PATHSEP)include

# Define 64-bit macros specific to the gxcode library
ifeq ($(64BITCFG),1)
	64BIT_DEFMACS = -D__64_BIT_DATABASE_ENGINE__ -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -m64
else
	64BIT_DEFMACS = -D__NO_64_BIT_DATABASE_ENGINE__ -m32
endif

ifeq ($(FINAL),1)
	DEBUG_DEFMACS = -D__NO_DEBUG_OPTIONS__
else
	DEBUG_DEFMACS = -D__USE_NATIVE_INT_TYPES__ -D__USE_NATIVE_FLOAT_TYPES__
endif

ANSI_DEFMACS = -D__USE_ANSI_CPP__
BTREE_DEFMACS = -D__USE_BINARY_SEARCH__ -D__USE_SINGLE_COMPARE__
CPP_DEFMACS = -D__USE_CPP_IOSTREAM__ #-D__CPP_EXCEPTIONS__
DATABASE_DEFMACS = -D__USE_DATABASE_CACHE__ -D__USE_BTREE_CACHE__
DEVCACHE_DEFMACS = -D__VMEMORY_BUFFER__ # -D__SMEMORY_BLOCK__
DISPLAY_DEFMACS = -D__CONSOLE__
FILESYS_DEFMACS =
#TESTCODE_DEFMACS = -D__USE_CRC32_TABLE_FUNCTIONS__ -D__USE_EDS_TEST_FUNCTIONS__
PS_DEFMACS = -D__USE_POSTSCRIPT_PRINTING__ 
HTM_DEFMACS = -D__USE_HTM_PRINTING__ 
TXT_DEFMACS = -D__USE_TEXT_PRINTING__
IO_DEFMACS = -D__USE_SIGNAL_IO__
THREAD_DEFMACS = -D__REENTRANT__ #-D__GUI_THREAD_SAFE__
POSIX_DEFMACS= -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS
UNICODE_DEMACS = -D__HAS_UNICODE__
SERIAL_COMM_DEFMACS = -D__LINUX_BAUD_RATE_38400_SUPPORT__ \
-D__LINUX_BAUD_RATE_57600_SUPPORT__ -D__LINUX_BAUD_RATE_115200_SUPPORT__ \
-D__LINUX_BAUD_RATE_230400_SUPPORT__ -D__LINUX_BAUD_RATE_460800_SUPPORT__
# TERMIO_DEFMACS = -D__USE_TERMINAL_IO__
# SSL_DEFMACS = -D__USE_GX_SSL_EXTENSIONS__

# Setup define macros
DEFMACS = -D__UNIX__ -D__POSIX__ -D__LINUX__ -D__X86__ \
$(64BIT_DEFMACS) $(ANSI_DEFMACS) \
$(BTREE_DEFMACS) $(CPP_DEFMACS) $(DEBUG_DEFMACS) $(DEVCACHE_DEFMACS) \
$(DISPLAY_DEFMACS) $(FILESYS_DEFMACS) $(TESTCODE_DEFMACS) \
$(PS_DEFMACS) $(HTM_DEFMACS) $(TXT_DEFMACS) $(COMPILER_DEFMACS) \
$(DATABASE_DEFMACS) $(UNICODE_DEMACS) $(TERMIO_DEFMACS) \
$(THREAD_DEFMACS) $(POSIX_DEFMACS) $(SSL_DEFMACS)

# Define macros for compiler and linker
CC = gcc
CPP = g++ 
LINKER = ld
LIBUTIL = ar
RANLIB_UTIL = ranlib
SHARED_LIBUTIL = gcc -shared
LN_S = ln -s
LIBUTIL_FLAGS = ruv
SHAREDLIBUTIL_FLAGS =

# Define in application makefile
#ADD_INC_PATHS = 

# Define compiler and linker flags macros
# NOTE: For extended debugging add: -g -O0 -v -da -Q 
DEBUG_FLAGS = -Wall -g -O0 -v -da -Q $(OPENSSL_DEFMACS) $(OPENSSL_DEBUG_FLAGS) -I$(OPENSSL_INC_PATHS) \
$(ADD_INC_PATHS) $(DEFMACS) -I$(GCODE_LIB_DIR)$(PATHSEP)include 

RELEASE_FLAGS = -Wall $(OPENSSL_DEFMACS) $(OPENSSL_RELEASE_FLAGS) -I$(OPENSSL_INC_PATHS) \
$(ADD_INC_PATHS) $(DEFMACS) -I$(GCODE_LIB_DIR)$(PATHSEP)include

ifeq ($(FINAL),1)
	COMPILE_FLAGS = $(RELEASE_FLAGS) -I$(GCODE_LIB_DIR)$(PATHSEP)include
else
	COMPILE_FLAGS = $(DEBUG_FLAGS) -I$(GCODE_LIB_DIR)$(PATHSEP)include 
endif

COMPILE_ONLY = -c
OUTPUT = -o

# Set link libraries here
# SSL config below. NOTE: Cannot build static binary using default SSL library
# LINK_LIBRARIES = $(SSL_LIB) $(CRYPTO_LIB) $(OPENSSL_LINKER_FLAGS)
# LINKER_FLAGS = -lpthread -ldl -lssl -lcrypto 

LINK_LIBRARIES = 
# For static binary builds use code below
#LINKER_FLAGS = -lpthread -static
# Default to dynamic library build
LINKER_FLAGS = -lpthread

# Additional libraries
LIBRARIES = 

# --------------------------------------------------------------- 
#####################
#### End of File ####
#####################
